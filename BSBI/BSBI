
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;


public class BSBI {

    private File[] documents;
    private Queue<TermPosting> mergeQueue = new PriorityQueue<>();
    private int amountOfFinishedBlocks;
    private int amountOfBlocks;
    private int documentsPerBlock;
    private BSBIIndex bsbiIndex;
    private MergeIndexWriter mergeIndexWriter;
    private HashMap<Integer, TermPosting> list = new HashMap<>();
    private static final String BOOK_PATH = "C://SYNE//Information Retrieval//";

    public BSBI(File[] documents) {
        this.documents = documents;
    }

    public void bsbi() {

        int amountOfDocuments = documents.length;
        documentsPerBlock = Math.round(Math.round(amountOfDocuments / (Math.log(amountOfDocuments))));

        List<File[]> blocksList = parseBlocks(documents, amountOfDocuments, documentsPerBlock);
        HashMap<String, Integer> termIDList = new HashMap<>();
        HashMap<String, Integer> docIDList = new HashMap<>();

        generateIndex(blocksList, termIDList, docIDList);

        File invertedIndexFile = new File(BOOK_PATH + "BSBI_Index.txt");
        File directoryOfBlocks = new File(BOOK_PATH);

        amountOfFinishedBlocks = 0;
        amountOfBlocks = 0;

        try {

            for (File block : Objects.requireNonNull(directoryOfBlocks.listFiles())) {
                if (!block.getName().equals(invertedIndexFile.getName())) {
                    BlockIndexReader blockIndexReader = new BlockIndexReader(this, mergeQueue, block);
                    blockIndexReader.readBlockIndex();

                    amountOfBlocks++;
                }
            }

            mergeIndexWriter = new MergeIndexWriter(this, mergeQueue, invertedIndexFile);
            mergeIndexWriter.mergeAndWrite();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void generateIndex(List<File[]> blocksList, HashMap<String, Integer> termList, HashMap<String, Integer> documentList) {
        int blockNumber = 0;

        for (File[] block : blocksList) {
            BlockingQueue<String[]> queue = new LinkedBlockingQueue<>();

            BlockReader reader = new BlockReader(block, queue);
            bsbiIndex = new BSBIIndex(this, queue, termList, documentList, documents);

            reader.readBlocks();
            bsbiIndex.createIndex(blockNumber++, documentsPerBlock);

        }
    }

    private List<File[]> parseBlocks(File[] documents, int amountOfDocuments, int documentsPerBlock) {
        List<File[]> listOfBlocks = new ArrayList<>();
        for (int i = 0; i < amountOfDocuments; i += documentsPerBlock) {
            int size = (i + documentsPerBlock) <= amountOfDocuments ? documentsPerBlock : amountOfDocuments - i - 1;

            System.out.println("Amount of documents: " + amountOfDocuments + ", documents per block: " + size);

            File[] block = new File[size];
            System.arraycopy(documents, i, block, 0, size);
            listOfBlocks.add(block);
        }
        return listOfBlocks;
    }


    public void incrementBlockFinished() {
        amountOfFinishedBlocks++;
    }

    public boolean getBlocksFinished() {
        return amountOfFinishedBlocks == amountOfBlocks;
    }

    public int getAmountOfBlocks() {
        return amountOfBlocks;
    }

    public BSBIIndex getBsbiIndex() {
        return bsbiIndex;
    }

    public HashMap<Integer, TermPosting> getList() {
        return list;
    }

}
